AUTHOR:	Andrew Repp

GENERAL DESCRIPTION:  Routines which calculate the Fisher information matrix for Gaussian and non-Gaussian cases.

DEPENDENCIES:
	Requires modules pt and param from CosmoPy
	Requires CAMB executable (call to CAMB is through CosmoPy)

====================================================================

ROUTINES:


get_powerspec(z, linear=False, bias=1.0, normalize=False, sig8=sig8_fid, **kwargs)

Description: Obtains the galaxy power spectrum given specification of parameters (the others being assumed to have fiducial values). Note that if the bias differs from unity, this routine returns the galaxy power spectrum, not the dark matter power spectrum.

Input:
z	Redshift at which to calculate power spectrum
linear	Linear or non-linear power spectrum (default=False)    
bias	Galaxy bias (default=1.0)
normalize	Normalize to value of sigma_8 (default=False)
sig8	Value of sigma_8 for normalizing (default=fiducial value)
**kwargs	List of cosmological parameters; others assume value set in module param

Output:
k, Pk	k-values, corresponding power spectrum P(k)


---------------------------------------------------------------------

sig_sq_IS(V, Pk)

Description: Correction for intrasurvey contributions to trispectrum.

Input:
V	Survey volume (Gpc/h)^3
Pk	(Nonlinear) power spectrum in (Mpc/h)^3

Output:
sig2_IS	Intrasurvey component of sig^2_min


---------------------------------------------------------------------

SSM_sig_sq(V, ks, Pk)

Description: Correction for supersurvey contributions to trispectrum.

Input:
V	Survey volume (Gpc/h)^3
ks	k-values (h/Mpc)
Pk	LINEAR power spectrum in (Mpc/h)^3

Output:
sig2_SS	Supersurvey component of sig^2_min; currently set for local case; change commenting for global case


---------------------------------------------------------------------

get_correc(V, ks, Pk, linPk)
  
Description: Returns correction parameter sig^2_min for the covariance matrix; combination of intrasurvey and supersurvey contributions. Resulting sig^2_min depends on k_max and thus is an array of the same size as the ks.

Input:
V	Survey volume (Gpc/h)^3
ks	k-values (h/Mpc)
Pk	Nonlinear power spectrum in (Mpc/h)^3
linPk	Linear power spectrum in (Mpc/h)^3

Output:
sigsq_min	Minimum attainable variance for nonlinear amplitude parameter ln A_0; parametrizes non-Gaussian contribution to power spectrum covariance matrix


---------------------------------------------------------------------

del_param(z, parameter, sig=0, log=False, logparam=False, linear=False, bias=1.0, normalize=False, addend=0)
    
Description: Differentiates the power spectrum with respect to a given parameter. If log=True, differentiates ln P(k) rather than P(k). If logparam=True, differentiates with respect to the logarithm of the parameter. The addend term is added to the logarithmic derivative to facilitate handling of non-standard (non-CosmoPy) parameters. Numerical differentiation proceeds by means of a symmetric difference quotient, with increment percentage set in the header of the module

Input:
z	Redshift at which to differentiate power spectrum
parameter	Parameter (string) with respect to which to differentiate; must be a CosmoPy parameter or 'sigma_8' or 'scalar_amp'
sig	Reciprocal of mean galaxy number density (to handle shot noise). Default = 0. Units of (Mpc/h)^3
log	If true, differentiates ln P(k) rather than P(k) (default=False).
logparam	If true, differentiate with respect to the logarithm of the parameter rather than with respect to the parameter (default=False).
linear	Linear or non-linear power spectrum (default=False)    
bias	Galaxy bias (default=1.0)
normalize	Normalize power spectrum to value of sigma_8 (default=False)
addend	Added to d ln P(k)/d alpha (default=0); purpose is to handle strange parameter combinations

Output:
k	k-values (units h/Mpc)
del_param	Requested derivative
        

---------------------------------------------------------------------


get_Fish_kmax(V, z, alpha, beta, n_bar=np.inf, gauss=False, k_min=0, linear=False, bias=1.0, normalize=False, special=None,                  alphlogparam=False, betalogparam=False, alphmult=1.0, betamult=1.0, alph_add=0.0, beta_add=0.0, correc_sig_sq_min=None, Pk=None)

Description: Calculates a series of Fisher matrix entries (for a given row/column) for a series of k_maxes. The row/column is given by (alpha, beta), where alpha and beta are comological parameters. 'log' flags indicate whether or not the parameter indexing the matrix is the log of a CAMB (or CosmoPy) paramter. The 'mult' values get multiplied into the derivative to help handle nonstandard parameters (e.g., ln sig^2_8). The 'add' values are add to ln P(k)/d param for the same purpose. For efficiency considerations, we allow the user to pass in correc_sig_sq_min and Pk

Input:
V	Survey volume (Gpc/h)^3
z	Redshift at which to differentiate power spectrum
alpha, beta	Parameters (strings) indexing the position of the entry in the Fisher matrix which is to be calculated. Must be a CosmoPy parameter or 'sigma_8' or 'scalar_amp'
n_bar	Mean galaxy number density (default=infinity). Units of (h/Mpc)^3
gauss	If true, assumes Gaussian matter distribution (default=False)
k_min	Minimum k-value (default=0). Units h/Mpc.
linear	If true, use linear power spectrum (default=False)
bias	Galaxy bias (default=1.0)
normalize	Normalize power spectrum to value of sigma_8 (default=False)
special	For testing/debugging (default=None)
alphlogparam	If true, we are considering the log of parameter alpha rather than alpha itself (default=False).
betalogparam	If true, we are considering the log of parameter beta rather than beta itself (default=False).
alphamult	Multiplied into alpha-derivative of power spectrum to handle non-CAMB parameters (default=1.0)
betamult	Multiplied into beta-derivative of power spectrum to handle non-CAMB parameters (default=1.0)
alph_add	Added to alpha-derivative of ln P(k) to handle non-CAMB parameters (default=0)
beta_add	Added to beta-derivative of ln P(k) to handle non-CAMB parameters (default=0)
correc_sig_sq_min	Non-Gaussianity parameter; will be calculated if not passed in (default=None).
Pk	Power spectrum; will be calculated if not passed in (default=None)

Output:
k	k-values (units h/Mpc)
fishes	Series of values for specified Fisher matrix element, using the k-values as sequential k_maxes


---------------------------------------------------------------------

get_fisher_series(V, z, param_list, gauss=False, n_bar=np.inf,                      k_min=0, linear=False, bias=1.0, log_flags=None, multiplier=None, addend=None)
    
Description: Calculates the Fisher matrices for a series of increasing k_max (as opposed to the routine get_Fish_kmax, which just calculates the series for one element of the matrix). Returns the series of k_maxes and an array of matrices, the nth matrix (corresponding to k_max= nth k) being matr_array[:,:,n].

The parameter list must contain only CAMB parameters and/or 'sigma_8' or 'scalar_amp'. Pass in values for log_flags, multipliers, and addends to handle non-standard parameter formulations.

Input:
V	Survey volume (Gpc/h)^3
z	Redshift at which to differentiate power spectrum
param_list	Parameter set for Fisher calculation. Each parameter (string) must be a CosmoPy parameter or 'sigma_8' or 'scalar_amp'
gauss	If true, assumes Gaussian matter distribution (default=False)
n_bar	Mean galaxy number density (default=infinity). Units of (h/Mpc)^3
k_min	Minimum k-value (default=0); units h/Mpc.
linear	If true, use linear power spectrum (default=False)
bias	Galaxy bias (default=1.0)
logflags	A list of flags (same shape as param_list)dictating whether we are considering the log of the corresponding parameter the parameter itself, for the purpose of handling non-CAMB parameters. Default is None, equivalent to a list of Falses.
multiplier	A list of multipliers (same shape as param_list) for the derivatives of the power spectrum, to handle non-CAMB parameters. Default is None, equivalent to a list of 1.0s.
addend	A list of terms (same shape as param_list) to be added to derivative of ln P(k) to handle non-CAMB parameters. Default is None, equivalent to a list of zeros.

Output:
k	k_max values (h/Mpc)
matr_array	Array of Fisher matrices, one for each value of k_max. The nth matrix (corresponding to k_max=nth value in list k) is matr_array[:,:,n].


---------------------------------------------------------------------

The remaining routines (gen_incr, getincr, and fix_length) are utility routines to simplify some of the code.



